/*
 * Copyright 2016 Tamer AbdulRadi
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package troy.typelevel

import scala.annotation.implicitNotFound

object facts {
  def tableExists[Table <: String : TableExists] =
    TableExists.instance[Table, Success[Unit]]

  def columnHasType[Table <: String : TableExists, Column <: String, ColumnT <: ColumnType] =
    ColumnHasType.instance[Table, Column, Success[ColumnT]]

  def indexExists = ???

  def customFunctionHasSignature = ???
}


/*
 * Name is expected to be a textual literal type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 * Success[Unit] -> exists
 * Error -> Doesn't exist
 */
trait TableExists[T <: String] { type Out <: Result[_, Unit] }
object TableExists {
  type Aux[T <: String, O <: Result[_, Unit]] =
    TableExists[T] { type Out = O }

  def instance[T <: String, O <: Result[_, Unit]]: Aux[T, O] =
    new TableExists[T] { override type Out = O }

  implicit def doesNotExist[T <: String] =
    TableExists.instance[T, Failure[TableDoesNotExist[T]]]
}


/*
 * Represents the column's Cassandra data type
 * This type-class is meant to be instantiated at the call site (might be auto-generated by a macro/plugin)
 * to give the compiler a hint about the schema
 */
trait ColumnHasType[Table <: String, Column <: String] { type Out <: Result[_, ColumnType] }
object ColumnHasType {
  type Aux[Table <: String, Column <: String, O <: Result[_, ColumnType]] =
    ColumnHasType[Table, Column] { type Out = O }

  def instance[Table <: String, Column <: String, CT <: Result[_, ColumnType]](
    implicit tableExists: TableExists[Table]
  ): Aux[Table, Column, CT] =
    new ColumnHasType[Table, Column] { override type Out = CT }

  implicit def doesNotExist[Table <: String, Column <: String] =
    ColumnHasType.instance[
      Table,
      Column,
      Failure[ColumnDoesNotExist[Table, Column]]
    ]
}
